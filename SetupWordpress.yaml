- name: "Installing wordpress dependencies"
  hosts: all
  become: True
  gather_facts: yes
  vars:
    get_installer: 'curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php || /bin/true'
    get_signature: 'curl -sS https://composer.github.io/installer.sig'
  tasks:
        - name: "Update repository"
          apt: 
              update_cache: "yes"
        - name: "Installing requirements"
          apt:
            name:
                 - "curl"
                 - "php"
                 - "php-cli"
                 - "gnupg"
                 - "unzip"
                 - "nginx"
                 - "mysql-server"
                 - "php-fpm"
                 - "php-mysql"
                 - "apache2"
                 - "ghostscript"
                 - "libapache2-mod-php"
                 - "php-bcmath"
                 - "php-curl"
                 - "php-imagick"
                 - "php-intl"
                 - "php-json"
                 - "php-mbstring"
                 - "php-xml"
                 - "php-zip"
            state: present
        - name: "Check if composer already installed"
          become_user: "{{ ansible_env.SUDO_USER }}"
          ignore_errors: yes
          shell:
            cmd: "composer"
          register: IsComposer
        - name: "get composer installer"
          shell: 
            cmd: "{{ item }}"
          with_items:
            - "{{ get_installer }}"
          async: 20
          poll: 2
          when: IsComposer.rc != 0
        - name: "Getting composer installer signature "
          shell:
                # "echo 'curl -sS https://composer.github.io/installer.sig'"
                # doesn't do the trick as it merely echoes the cmd string back
                # and that's not what we want
                "{{ get_signature }}"
          register: HASH # store the hash into a variable named HASH
          when: IsComposer.rc != 0
        - name: "Verify installer "
          shell:
            cmd: >
              php -r 
              "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$hashVal') 
              { echo 'Installer verified'; } 
              else { echo 'Installer corrupt'; unlink('composer-setup.php'); } 
              echo PHP_EOL;"
          register: status
          environment:
            hashVal: "{{ HASH.stdout }}" 
          when: IsComposer.rc != 0

        - fail:
            msg: "Installer corrupt retry later"
          when: (IsComposer.rc != 0) and (status.stdout == 'Installer corrupt')

        - debug: 
            msg: 
              - "hash is {{ HASH.stdout }}" # skipping the brace doesn't work
              - "status is {{ status.stdout }}"
          when: IsComposer.rc != 0

        - name: "Installing composer"
          shell:
            cmd: >
              sudo php /tmp/composer-setup.php 
              --install-dir=/usr/local/bin 
              --filename=composer
          register: out
          when: IsComposer.rc != 0
        - debug:
            msg: |
              "cmd output is: "
              "{{ out.stdout }}"
          when: IsComposer.rc != 0
        - debug:
            msg: "composer already installed"
          when: IsComposer.rc == 0

- name: Installing wordpress through source
  hosts: all
  become: True
  vars:
    wprootdir: "/srv/www"
  tasks:
    - name: checking if wp src dir exists
      stat:
        path: "{{ wprootdir }}"
      register: dir_details
    - name: creating /var/www for wordpress source
      file:
        #path: "'{{ wp-root-dir }}' + 'wordpress'" 
        path: "/srv/www/wordpress" 
        recurse: yes
        state: directory
        owner: www-data
      when: (dir_details.stat.exists = 0)
    - name: downloading and extracting wordpress source
      shell:
        cmd: "curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www"
      register: status
      when: (dir_details.stat.exists = 1)
    - fail:
        msg: "Unable to download or extract wordpress source"
      when: (dir_details.stat.exists) and (status.rc != 0)

- name: Configuring apache for wordpress
  hosts: all
  become: True
  vars:
    wprootdir: "/srv/www/wordpress"
    wpconffile: "/etc/apache2/sites-available/wordpress.conf"
  tasks:
    - name: "checking if wp conf file exists"
      stat:
        path: "{{ wpconffile }}"
      register: file_details
    - name: deleting the file if it exists
      file:
        path: "{{ wpconffile }}"
        state: absent
      when: file_details.stat.exists
    - name: creating /var/www for wordpress source
      file:
        path: "{{ wpconffile }}"
        state: touch
        owner: www-data
    - name: creating wordpress conf file
      template:
        src: apache2.j2
        dest: /etc/apache2/sites-available/wordpress.conf
      #when: file_details.stat.exists=false
    - name: enabling the site
      shell:
        cmd: "a2ensite wordpress"
    - name: enable URL rewriting
      shell:
        cmd: "a2enmod rewrite"
    - name: disable default "it works" site
      shell:
        cmd: "a2dissite 000-default"
    - name: restart apache2
      service:
        name: apache2
        state: reloaded
