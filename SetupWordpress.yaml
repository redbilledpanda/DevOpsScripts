- name: "Installing wordpress dependencies"
  hosts: all
  become: True
  gather_facts: True
  vars:
    get_installer: 'curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php || /bin/true'
    get_signature: 'curl -sS https://composer.github.io/installer.sig'
  tasks:
        - name: "Update repository"
          apt: 
              update_cache: "yes"
        - name: "Installing requirements"
          apt:
            name:
                 - "curl"
                 - "php"
                 - "php-cli"
                 - "gnupg"
                 - "unzip"
                 - "mysql-server"
                 - "php-fpm"
                 - "php-mysql"
                 - "apache2"
                 - "ghostscript"
                 - "libapache2-mod-php"
                 - "php-bcmath"
                 - "php-curl"
                 - "php-imagick"
                 - "php-intl"
                 - "php-json"
                 - "php-mbstring"
                 - "php-xml"
                 - "php-zip"
            state: present
        - name: "stopping nginx if running"
          service:
            name: nginx
            state: stopped
        - name: "remove nginx if installed"
          apt:
            name:
                - "nginx"
            state: absent
        - name: stop Mysql
          service:
            name: mysql
            state: stopped
        - name: stop apache2
          service:
            name: apache2
            state: stopped
        - name: "Check if composer already installed"
          become_user: "{{ ansible_env.SUDO_USER }}"
          ignore_errors: yes
          shell:
            cmd: "composer"
          register: IsComposer
        - name: "get composer installer"
          shell: 
            cmd: "{{ item }}"
          with_items:
            - "{{ get_installer }}"
          async: 20
          poll: 2
          when: IsComposer.rc != 0
        - name: "Getting composer installer signature "
          shell:
                # "echo 'curl -sS https://composer.github.io/installer.sig'"
                # doesn't do the trick as it merely echoes the cmd string back
                # and that's not what we want
                "{{ get_signature }}"
          register: HASH # store the hash into a variable named HASH
          when: IsComposer.rc != 0
        - name: "Verify installer "
          shell:
            cmd: >
              php -r 
              "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$hashVal') 
              { echo 'Installer verified'; } 
              else { echo 'Installer corrupt'; unlink('composer-setup.php'); } 
              echo PHP_EOL;"
          register: status
          environment:
            hashVal: "{{ HASH.stdout }}" 
          when: IsComposer.rc != 0

        - fail:
            msg: "Installer corrupt retry later"
          when: (IsComposer.rc != 0) and (status.stdout == 'Installer corrupt')

        - debug: 
            msg: 
              - "hash is {{ HASH.stdout }}" # skipping the brace doesn't work
              - "status is {{ status.stdout }}"
          when: IsComposer.rc != 0

        - name: "Installing composer"
          shell:
            cmd: >
              sudo php /tmp/composer-setup.php 
              --install-dir=/usr/local/bin 
              --filename=composer
          register: out
          when: IsComposer.rc != 0
        - debug:
            msg: |
              "cmd output is: "
              "{{ out.stdout }}"
          when: IsComposer.rc != 0
        - debug:
            msg: "composer already installed"
          when: IsComposer.rc == 0

- name: Installing wordpress through source
  hosts: all
  become: True
  gather_facts: False
  vars:
    wprootdir: "/srv/www/wordpress"
  tasks:
    - name: checking if wp src dir exists
      stat:
        path: "{{ wprootdir }}"
      register: dir_details
    - name: delete existing wordpress source files
      become_user: www-data
      no_log: True
      file:
        #path: "{{ item.path }}"
        #recurse: True
        path: "{{ wprootdir }}"
        state: absent
      #with_items: "{{ path_list.files }}"
    - name: creating /var/www for wordpress source
      file:
        #path: "'{{ wp-root-dir }}' + 'wordpress'" 
        path: "/srv/www/wordpress" 
        recurse: yes
        state: directory
        owner: www-data
        mode: '0755'  
      when: (dir_details.stat.exists == 0)
    - name: downloading and extracting wordpress source
      shell:
        cmd: "curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www"
      register: status
      when: (dir_details.stat.exists == 1)
    - fail:
        msg: "Unable to download or extract wordpress source"
      when: (dir_details.stat.exists) and (status.rc != 0)

- name: Configuring apache for wordpress
  hosts: all
  become: True
  gather_facts: False
  vars:
    wprootdir: "/srv/www/wordpress"
    wpconffile: "/etc/apache2/sites-available/wordpress.conf"
  tasks:
    - name: "checking if wp conf file exists"
      stat:
        path: "{{ wpconffile }}"
      register: file_details
    - name: deleting the file if it exists
      file:
        path: "{{ wpconffile }}"
        state: absent
      when: (file_details.stat.exists == 1)
    - name: creating /var/www for wordpress source
      file:
        path: "{{ wpconffile }}"
        state: touch
        owner: www-data
    - name: creating wordpress conf file
      template:
        src: apache2.j2
        dest: "{{ wpconffile }}"
      when: (file_details.stat.exists == 0)
    - name: enabling the site
      shell:
        cmd: "a2ensite wordpress"
    - name: enable URL rewriting
      shell:
        cmd: "a2enmod rewrite"
    - name: disable default "it works" site
      shell:
        cmd: "a2dissite 000-default"
    - name: restart apache2
      service:
        name: apache2
        state: reloaded

- name: Configuring database
  hosts: all
  become: True
  gather_facts: True
  #gather_facts: yes
  vars:
    mysql_port: 3306
    mysql_socket: /var/run/mysqld/mysqld.sock
    mysql_superuser: root
    mysql_superuser_home: "{% if mysql_superuser == 'root' %}/root{% else %}/home/{{ mysql_superuser }}{% endif %}"
    mysql_superuser_password: SuperUserPwd
    mysql_wordpress_password: WordpressPwd
    http_port: 80  
  tasks:
    - name: Installing PyMySql through pip
      pip:
        name: PyMySql
        state: present
    - name: ensure mysql is running and starts on boot
      service:
        name: mysql
        state: started
        enabled: True
          
    - name: Removes anonymous user account for localhost
      community.mysql.mysql_user:
        name: ''
        state: absent
        login_user: root
        login_password: ""
        login_unix_socket: "{{ mysql_socket }}"
      when: ansible_local.mysqlinfo.mysql_superuser_password is undefined      

    - name: adding a password for root user
      mysql_user:
        # Update the superuser to have all grants and a password
        name: "{{ mysql_superuser }}"
        host: localhost
        password: "{{ mysql_superuser_password }}"
        priv: "*.*:ALL,GRANT"
        # Login *as root* to perform this change, even though you might
        # be altering the root user itself
        login_user: root
        login_password: ""
        login_port: "{{ mysql_port }}"
        login_host: localhost
        login_unix_socket: "{{ mysql_socket }}"
        # As a good measure,have ansible check whether an implicit login
        # is possible first
        check_implicit_admin: yes
      when: ansible_local.mysqlinfo.mysql_superuser_password is undefined      
    - name: "Create custom fact directory"
      file:
        path: "/etc/ansible/facts.d"
        state: "directory"
        recurse: yes
      when: ansible_local.mysqlinfo.mysql_superuser_password is undefined      
    - name: "record mysql info in custom fact"
      template:
        src: mysqlinfo.j2
        dest: /etc/ansible/facts.d/mysqlinfo.fact
        mode: 0644
      when: ansible_local.mysqlinfo.mysql_superuser_password is undefined      
    - name: "re-run setup to use custom facts"
      setup:
        filter: ansible_local
      when: ansible_local.mysqlinfo.mysql_superuser_password is undefined      
    - debug:
        msg:
          - "my sql password is {{ ansible_local.mysqlinfo.mysql_superuser_password }}"
      when: ansible_local.mysqlinfo.mysql_superuser_password is defined      
    - name: Create system-wide mysql configuration file
      template:
        src: mysql_sys.cnf.j2
        dest: /etc/my.cnf

    - name: Create mysql configuration file for `{{ mysql_superuser }}`
      template:
        src: mysql_superuser.cnf.j2
        dest: "{{ mysql_superuser_home }}/.my.cnf"

    - name: create database wordpress
      mysql_db: 
        db: wordpress
        state: present
        login_unix_socket: "{{ mysql_socket }}"

    - name: Create database user 'wordpress' with all database privileges
      community.mysql.mysql_user:
        name: wordpress
        password: "{{ mysql_wordpress_password }}"
        priv: '*.*:ALL'
        state: present

    - name: Flush privileges
      mysql_query:
        login_db: wordpress
        query: FLUSH PRIVILEGES 

     # UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
      notify:
      - Restart Mysql
      tags: [ system ]

- name: Configuring wordpress to connect to the database
  hosts: all
  gather_facts: False
  become: true
  vars:
    wpconfigfile: "/srv/www/wordpress/wp-config.php"
  tasks:
    - name: copy sample config to wp-config.php
      #become_user: www-data
      copy:
        remote_src: yes
        src: /srv/www/wordpress/wp-config-sample.php
        dest: "{{ wpconfigfile }}"
        owner: www-data

    - name: "re-run setup to use custom facts"
      setup:
        filter: ansible_local
    - name: set database credentials in the config file
      become: false
      #become_user: www-data
      #become_method: "su"
      # multiple commands are run like this whereas with
      # single command one can use a cmd paramater
      # since this is technically *not* a list passed to /bin/sh
      # we do not need a list here. Instead it is a series of 
      # commands being passed to /bin/sh
      #shell: |
      # apparently, passing this list directly doesn't seem to work
      # what works is this loop
      command: "{{ item }}"
      with_items:
        - "sudo -u www-data sed -i s/database_name_here/wordpress/ {{ wpconfigfile }}"
        - "sudo -u www-data sed -i s/username_here/wordpress/ {{ wpconfigfile }}"
        - "sudo -u www-data sed -i s/password_here/{{ ansible_local.mysqlinfo.mysql_wordpress_password }}/ {{ wpconfigfile }}"
    - name: get random secret keys
      uri:
        url: https://api.wordpress.org/secret-key/1.1/salt/
        return_content: yes
        body_format: json
      register: wordpress_keys
    - debug:
        var: wordpress_keys.content
    - name: delete existing bak file
      file:
        path: "{{ wpconfigfile }}.bak"
        state: absent
    - name: run script to remove key placeholders
      become_user: www-data
      script:
        chdir: /srv/www/wordpress/
        cmd: replacelines.py
        executable: /usr/bin/python3
        environment: /srv/www/wordpress/
    - name: update config file
      become_user: www-data
      copy:
        remote_src: yes
        src: "{{ wpconfigfile }}.bak"
        dest: "{{ wpconfigfile }}"
    - blockinfile:
        path: "{{ wpconfigfile }}"
        marker: // {mark} ANSIBLE MANAGED BLOCK  
        # having this separator here was giving me issues   
        #block: |
        block:
          "{{ wordpress_keys.content }}"

  handlers:
    - name: Restart Mysql
      service:
        name: mysql
        state: restarted
    - name: Restart Apache2
      service:
        name: apache2
        state: restarted
